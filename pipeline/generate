#!/usr/bin/env python3
import argparse
import csv
import logging
import os
import sys
import pandas as pd
root_dir = os.path.realpath(os.path.join(os.path.dirname(__file__), '..'))
sys.path.append(root_dir)
import progja


logger = logging.getLogger(__name__)
progja.logging.configure_logging()

parser = argparse.ArgumentParser()
targets = ('deck', 'decks')
parser.add_argument('target', choices=targets, metavar='<target>',
    help='The target to generate')
level_choices = progja.paths.levels
parser.add_argument('--level', nargs='?', type=int, choices=level_choices,
    metavar='n', const=1, help='A deck level (default: 1)')
parser.add_argument('--embed-style', action='store_true',
    help='Embed default style within each card')


def main():
    args = parser.parse_args()
    style = load_default_deck_style() if args.embed_style else None
    if args.target == 'deck':
        build_level_deck(args.level, style=style)
    if args.target == 'decks':
        for level in level_choices:
            build_level_deck(level, style=style)


def load_default_deck_style():
    logger.info('loading default deck style ...')
    style = progja.data.load_text('deck-style.css')
    logger.info('loaded default deck style')
    return style


def build_level_deck(level, style=None):
    logger.info('building level {} deck ...'.format(level))
    path = progja.paths.load_level(level)
    deck = build_deck(path, style)
    deck = dedupe_deck(deck)
    save_level_deck(deck, level)
    logger.info('built level {} deck'.format(level))


def build_deck(path, style=None):
    logger.info('building deck ...')
    deck = []
    for component in zip(path['Component'], path['Type']):
        for card in progja.decks.create_cards(component, style):
            # add the version tag to the card
            tags = card['Tags'].split(' ')
            tags.append('progja::version::{}'.format(progja.VERSION))
            card['Tags'] = ' '.join(tags)
            # add the card to the deck
            deck.append(card)
    logger.info('built deck')
    return deck


def dedupe_deck(deck):
    deduped = {}
    for card in deck:
        deduped[card['ID']] = card
    return list(deduped.values())


def save_level_deck(deck, level):
    save_deck(deck, progja.data.path('deck-level-{}.csv'.format(level)))


def save_deck(deck, path):
    logger.info('saving deck ...')
    pd.DataFrame(deck).to_csv(path, index=None, header=None)
    logger.info('saved deck ...')


if __name__ == '__main__':
    main()
