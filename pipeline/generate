#!/usr/bin/env python3
import argparse
import logging
import os
import sys
import pandas as pd
root_dir = os.path.realpath(os.path.join(os.path.dirname(__file__), '..'))
sys.path.append(root_dir)
import progja  # noqa: E402


logger = logging.getLogger(__name__)
progja.logging.configure_logging()

parser = argparse.ArgumentParser()
targets = ('deck', 'decks')
parser.add_argument(
    'target', choices=targets, metavar='<target>',
    help='The target to generate')
level_choices = progja.paths.levels
parser.add_argument(
    '--level', nargs='?', type=int, choices=level_choices, metavar='n', const=1,
    help='A deck level (default: 1)')
parser.add_argument('--version', help='Override the version number')


def main():
    args = parser.parse_args()
    if args.target == 'deck':
        build_level_deck(args.level, version=args.version)
    if args.target == 'decks':
        for level in level_choices:
            build_level_deck(level, version=args.version)


def build_level_deck(level, version=None):
    logger.info('building level {} deck ...'.format(level))
    path = progja.paths.load_level(level)
    deck = build_deck(path, version)
    deck = dedupe_deck(deck)
    save_level_deck(deck, level)
    logger.info('built level {} deck'.format(level))


def build_deck(path, version=None):
    version = version or progja.VERSION
    logger.info('building deck ...')
    deck = []
    for component in zip(path['Component'], path['Type']):
        for card in progja.decks.create_cards(component):
            # add the version tag to the card
            tags = card['Tags'].split(' ')
            tags.append('progja::version::{}'.format(version))
            card['Tags'] = ' '.join(tags)
            # add the card to the deck
            deck.append(card)
    logger.info('built deck')
    return deck


def dedupe_deck(deck):
    deduped = {}
    for card in deck:
        deduped[card['ID']] = card
    return list(deduped.values())


def save_level_deck(deck, level):
    filename = 'deck-level-{}.csv'.format(level)
    save_deck(deck, progja.data.path('decks', filename))


def save_deck(deck, path):
    logger.info('saving deck ...')
    pd.DataFrame(deck).to_csv(path, index=None, header=None)
    logger.info('saved deck ...')


if __name__ == '__main__':
    main()
