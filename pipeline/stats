#!/usr/bin/env python3
import logging
import os
import sys
root_dir = os.path.realpath(os.path.join(os.path.dirname(__file__), '..'))
sys.path.append(root_dir)
import progja


logger = logging.getLogger(__name__)
progja.logging.configure_logging()


def main():
    logger.info('creating stats file ...')
    with open(os.path.join(root_dir, 'docs', 'stats.md'), 'w') as file:
        file.write('\n'.join([
            '# Statistics',
            '',
            'These numbers may not correspond exactly to the number of cards ',
            'in each Anki deck.',
            '',
            *get_completion_stats(),
            '',
            *get_completion_stats_kanji_grade(),
            '',
            *get_completion_stats_common_words(),
            '',
        ]))
    logger.info('created stats file')


def get_completion_stats():
    lines = [
        '## Completion schedule (kanji, words, sentences):',
        '',
        'The numbers below are cumulative for each path level. The numbers ',
        'in parenthesis are cumulative for all path levels.',
        '',
        '| Level | % | # | Kanji | Words | Sentences |',
        '| ----- | - | - | ----- | ----- | --------- |'
    ]
    cumulative = {'kanji': 0, 'word': 0, 'sentence': 0}
    for level, path in progja.paths.load_levels().items():
        for percent in (0.25, 0.5, 0.75, 1):
            limit = int(len(path) * percent)
            path_limit = path[:limit]
            counts = dict(path_limit['Type'].value_counts())
            kanji_counts = counts.get('kanji', 0)
            word_counts = counts.get('word', 0)
            sentence_counts = counts.get('sentence', 0)
            kanji_counts_total = kanji_counts + cumulative['kanji']
            word_counts_total = word_counts + cumulative['word']
            sentence_counts_total = sentence_counts + cumulative['sentence']
            row = (
                level,
                '{}%'.format(int(percent * 100)),
                '{:,} ({:,})'.format(
                    sum([kanji_counts, word_counts, sentence_counts]),
                    sum([
                        kanji_counts_total,
                        word_counts_total,
                        sentence_counts_total
                    ])
                ),
                '{:,} ({:,})'.format(kanji_counts, kanji_counts_total),
                '{:,} ({:,})'.format(word_counts, word_counts_total),
                '{:,} ({:,})'.format(sentence_counts, sentence_counts_total)
            )
            lines.append('| {} |'.format(' | '.join(map(str, row))))
        counts = dict(path['Type'].value_counts())
        cumulative['kanji'] += kanji_counts
        cumulative['word'] += word_counts
        cumulative['sentence'] += sentence_counts
    return lines


def get_completion_stats_kanji_grade():
    kanji = progja.kanji.load()
    grades = progja.kanji.grades
    kanji_by_grade = {
        grade: set(kanji[kanji['Grade'] == grade]['Kanji'])
        for grade in grades
    }
    lines = [
        '## Completion schedule (kanji grade):',
        '',
        'Grade 1-6 and 8 are Jōyō kanji. Grade 9-10 are Jinmeiyō kanji.',
        '',
        '| Level | % | {} |'.format(' | '.join(map(str, grades))),
        '| ----- | - | {} |'.format(' | '.join(list('-' * len(grades))))
    ]
    known_kanji = set()
    for level, path in progja.paths.load_levels().items():
        complete = False
        for percent in (.25, .5, .75, 1):
            limit = int(len(path) * percent)
            path_percent = path[:limit]
            mask = path_percent['Type'] == 'kanji'
            path_kanji = set(path_percent[mask]['Component'])
            known_kanji = known_kanji.union(path_kanji)
            row = [
                level,
                '{}%'.format(int(percent * 100)),
                *(
                    '{}%'.format(round(
                        sum(k in kanji_by_grade[grade] for k in known_kanji)
                        / len(kanji_by_grade[grade])
                        * 100
                    ))
                    for grade in kanji_by_grade
                )
            ]
            lines.append('| {} |'.format(' | '.join(map(str, row))))
            if row[-1] == '100%':
                complete = True
        # stop when all graded kanji have been learned
        if complete:
            break
    return lines


def get_completion_stats_common_words():
    words = progja.words.load_common()
    nfs = ((1, 5), (6, 10), (11, 15), (16, 20), (21, 25), (26, 30), (31, 48))
    words_by_nf = {
        nf: set(words[words['PriorityNF'].between(*nf)]['Word'])
        for nf in nfs
    }
    lines = [
        '## Completion schedule (JMdict nf frequency):',
        '',
        "The lower the nf, the higher a word's frequency.",
        '',
        '| Level | % | 1-5 | 6-10 | 11-15 | 16-20 | 21-25 | 26-30 | 31+ |',
        '| ----- | - | --- | ---- | ----- | ----- | ----- | ----- | --- |'
    ]
    known_words = set()
    for level, path in progja.paths.load_levels().items():
        for percent in (.25, .5, .75, 1):
            limit = int(len(path) * percent)
            path_percent = path[:limit]
            mask = path_percent['Type'] == 'word'
            path_words = set(path_percent[mask]['Component'])
            known_words = known_words.union(path_words)
            row = [
                level,
                '{}%'.format(int(percent * 100)),
                *(
                    '{}%'.format(round(
                        sum(w in words_by_nf[nf] for w in known_words)
                        / len(words_by_nf[nf])
                        * 100
                    ))
                    for nf in words_by_nf
                )
            ]
            lines.append('| {} |'.format(' | '.join(map(str, row))))
    return lines


if __name__ == '__main__':
    main()
